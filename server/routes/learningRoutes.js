// server/routes/learningRoutes.js - OPTIMIZED VERSION
import express from 'express';
const router = express.Router();

// Cache for generated content (optional - helps reduce API calls)
const contentCache = new Map();
const CACHE_DURATION = 1000 * 60 * 30; // 30 minutes

function cleanJsonText(rawText) {
    let jsonText = rawText.trim();

    if (jsonText.startsWith('```json')) {
        jsonText = jsonText.replace(/```json\n?/g, '').replace(/```\n?$/g, '');
    } else if (jsonText.startsWith('```')) {
        jsonText = jsonText.replace(/```\n?/g, '');
    }

    const jsonStart = jsonText.indexOf('{');
    const jsonEnd = jsonText.lastIndexOf('}') + 1;

    if (jsonStart !== -1 && jsonEnd > jsonStart) {
        jsonText = jsonText.substring(jsonStart, jsonEnd);
    }

    return jsonText;
}

function getCacheKey(topic, subtopic, grade, personality) {
    return `${topic}-${subtopic}-${grade}-${personality}`;
}

router.post('/generate-content', async (req, res) => {
    try {
        const { topic, subtopic, topicId, subtopicId, grade, personality, userId } = req.body;

        console.log('üìö API Request received - Generating learning content:', {
            topic,
            subtopic,
            grade,
            personality,
            userId,
            hasApiKey: !!process.env.ANTHROPIC_API_KEY
        });

        // Validate required fields
        if (!topic || !grade || !personality) {
            return res.status(400).json({
                success: false,
                error: 'Missing required fields: topic, grade, and personality are required'
            });
        }

        if (!process.env.ANTHROPIC_API_KEY) {
            console.error('‚ùå ANTHROPIC_API_KEY not found in environment');
            return res.status(500).json({
                success: false,
                error: 'API key not configured'
            });
        }

        // Check cache first (optional)
        const cacheKey = getCacheKey(topic, subtopic, grade, personality);
        const cached = contentCache.get(cacheKey);
        if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
            console.log('‚úÖ Returning cached content');
            return res.json({
                success: true,
                content: cached.data,
                cached: true
            });
        }

        const personalityContext = personality === 'dina' ?
            '◊ê◊™ ◊ì◊ô◊†◊î - ◊û◊ï◊®◊î ◊°◊ë◊ú◊†◊ô◊™ ◊ï◊û◊¢◊ï◊ì◊ì◊™ ◊î◊û◊°◊ë◊ô◊®◊î ◊ë◊¶◊ï◊®◊î ◊ë◊®◊ï◊®◊î ◊ï◊ô◊ì◊ô◊ì◊ï◊™◊ô◊™' :
            personality === 'ron' ?
                '◊ê◊™◊î ◊®◊ï◊ü - ◊û◊ï◊®◊î ◊ê◊†◊®◊í◊ò◊ô ◊ï◊û◊¢◊ï◊®◊® ◊î◊©◊®◊ê◊î ◊î◊û◊©◊™◊û◊© ◊ë◊ì◊ï◊í◊û◊ê◊ï◊™ ◊û◊¢◊ï◊ú◊ù ◊î◊°◊§◊ï◊®◊ò ◊ï◊î◊û◊©◊ó◊ß◊ô◊ù' :
                '◊ê◊™◊î ◊†◊ß◊°◊ï◊ü - ◊û◊ï◊®◊î AI ◊û◊ß◊¶◊ï◊¢◊ô ◊ï◊û◊™◊ß◊ì◊ù ◊î◊û◊ï◊™◊ê◊ù ◊ê◊ô◊©◊ô◊™ ◊ú◊õ◊ú ◊™◊ú◊û◊ô◊ì';

        const learningPrompt = `${personalityContext}

◊¶◊ï◊® ◊™◊ï◊õ◊ü ◊ú◊ô◊û◊ï◊ì ◊ú◊û◊™◊û◊ò◊ô◊ß◊î ◊¢◊ë◊ï◊®:
- ◊†◊ï◊©◊ê: ${topic}
${subtopic ? `- ◊™◊™-◊†◊ï◊©◊ê: ${subtopic}` : ''}
- ◊õ◊ô◊™◊î: ${grade}

◊î◊ó◊ñ◊® JSON ◊ë◊§◊ï◊®◊û◊ò ◊î◊ñ◊î ◊ë◊ì◊ô◊ï◊ß:
{
  "title": "◊õ◊ï◊™◊®◊™ ◊û◊ï◊©◊õ◊™ ◊ú◊†◊ï◊©◊ê",
  "introduction": "◊û◊ë◊ï◊ê ◊ß◊¶◊®",
  "pages": [
    {
      "title": "◊ô◊°◊ï◊ì◊ï◊™ - ◊û◊î ◊ñ◊î ${topic}?",
      "content": [
        {
          "type": "text",
          "value": "◊î◊°◊ë◊® ◊®◊ê◊©◊ï◊†◊ô ◊§◊©◊ï◊ò ◊©◊ú ◊î◊†◊ï◊©◊ê"
        },
        {
          "type": "example",
          "value": "◊ì◊ï◊í◊û◊î ◊§◊©◊ï◊ò◊î: 5 + 3 = 8",
          "solution": "◊õ◊©◊û◊ó◊ë◊®◊ô◊ù 5 ◊ï-3, ◊û◊ß◊ë◊ú◊ô◊ù 8"
        },
        {
          "type": "tip",
          "value": "◊ò◊ô◊§ ◊©◊ô◊û◊ï◊©◊ô ◊ú◊ñ◊õ◊ï◊®"
        }
      ],
      "quiz": [
        {
          "question": "◊©◊ê◊ú◊î ◊§◊©◊ï◊ò◊î ◊ú◊ë◊ì◊ô◊ß◊î",
          "options": ["◊™◊©◊ï◊ë◊î 1", "◊™◊©◊ï◊ë◊î 2", "◊™◊©◊ï◊ë◊î 3", "◊™◊©◊ï◊ë◊î ◊†◊õ◊ï◊†◊î"],
          "correctAnswer": 3,
          "explanation": "◊î◊°◊ë◊® ◊ß◊¶◊®"
        }
      ]
    },
    {
      "title": "◊ì◊ï◊í◊û◊ê◊ï◊™ ◊û◊™◊ß◊ì◊û◊ï◊™",
      "content": [
        {
          "type": "text",
          "value": "◊î◊°◊ë◊® ◊û◊¢◊û◊ô◊ß ◊ô◊ï◊™◊®"
        },
        {
          "type": "example",
          "value": "◊ì◊ï◊í◊û◊î ◊û◊ï◊®◊õ◊ë◊™ ◊ô◊ï◊™◊®",
          "solution": "◊§◊™◊®◊ï◊ü ◊û◊§◊ï◊®◊ò"
        }
      ],
      "quiz": [
        {
          "question": "◊©◊ê◊ú◊î ◊û◊™◊ß◊ì◊û◊™",
          "options": ["◊ê", "◊ë", "◊í", "◊ì"],
          "correctAnswer": 1,
          "explanation": "◊î◊°◊ë◊®"
        }
      ]
    },
    {
      "title": "◊™◊®◊í◊ï◊ú ◊ï◊°◊ô◊õ◊ï◊ù",
      "content": [
        {
          "type": "text",
          "value": "◊°◊ô◊õ◊ï◊ù ◊©◊ú ◊õ◊ú ◊û◊î ◊©◊ú◊û◊ì◊†◊ï"
        },
        {
          "type": "tip",
          "value": "◊ò◊ô◊§ ◊ó◊©◊ï◊ë ◊ú◊°◊ô◊ï◊ù"
        }
      ],
      "quiz": [
        {
          "question": "◊©◊ê◊ú◊™ ◊°◊ô◊õ◊ï◊ù",
          "options": ["1", "2", "3", "4"],
          "correctAnswer": 0,
          "explanation": "◊°◊ô◊õ◊ï◊ù"
        }
      ]
    }
  ]
}

◊ó◊©◊ï◊ë: ◊¶◊ï◊® 3-4 ◊ì◊§◊ô◊ù, ◊õ◊ú ◊ì◊£ ◊¢◊ù 3-5 content items ◊ï-2-3 ◊©◊ê◊ú◊ï◊™ quiz. ◊î◊©◊™◊û◊© ◊ë◊¢◊ë◊®◊ô◊™ ◊§◊©◊ï◊ò◊î ◊ï◊ë◊®◊ï◊®◊î.
◊î◊ó◊ñ◊® ◊®◊ß ◊ê◊™ ◊î-JSON, ◊ú◊ú◊ê ◊ò◊ß◊°◊ò ◊†◊ï◊°◊£.`;

        console.log('ü§ñ Calling Claude API...');

        const response = await fetch('https://api.anthropic.com/v1/messages', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'x-api-key': process.env.ANTHROPIC_API_KEY,
                'anthropic-version': '2023-06-01'
            },
            body: JSON.stringify({
                model: 'claude-sonnet-4-20250514',
                max_tokens: 4000,
                temperature: 0.7,
                messages: [{
                    role: 'user',
                    content: learningPrompt
                }]
            })
        });

        console.log('üì° API Response status:', response.status);

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            console.error('‚ùå Claude API Error:', {
                status: response.status,
                statusText: response.statusText,
                error: errorData
            });
            return res.status(500).json({
                success: false,
                error: `API Error: ${response.status} ${response.statusText}`,
                details: errorData
            });
        }

        const data = await response.json();
        console.log('‚úÖ Got response from Claude');

        const contentText = data.content[0].text;
        console.log('üìÑ Raw content length:', contentText.length);
        console.log('üìÑ First 200 chars:', contentText.substring(0, 200));

        const cleanedText = cleanJsonText(contentText);
        console.log('üßπ Cleaned JSON length:', cleanedText.length);

        let learningContent;
        try {
            learningContent = JSON.parse(cleanedText);
            console.log('‚úÖ JSON parsed successfully');
            console.log('üìä Pages count:', learningContent.pages?.length);
        } catch (parseError) {
            console.error('‚ùå JSON Parse Error:', parseError.message);
            console.log('üìÑ Failed text:', cleanedText.substring(0, 500));
            return res.status(500).json({
                success: false,
                error: 'Failed to parse AI response',
                rawResponse: cleanedText.substring(0, 500)
            });
        }

        // Cache the result
        contentCache.set(cacheKey, {
            data: learningContent,
            timestamp: Date.now()
        });

        // Clean old cache entries (keep last 50)
        if (contentCache.size > 50) {
            const entries = Array.from(contentCache.entries());
            entries.sort((a, b) => a[1].timestamp - b[1].timestamp);
            for (let i = 0; i < 10; i++) {
                contentCache.delete(entries[i][0]);
            }
        }

        res.json({
            success: true,
            content: learningContent,
            cached: false
        });

    } catch (error) {
        console.error('‚ùå CRITICAL Error in generate-content:', error);
        console.error('Error stack:', error.stack);
        res.status(500).json({
            success: false,
            error: error.message || 'Internal server error',
            stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
        });
    }
});

// Optional: Clear cache endpoint
router.post('/clear-cache', (req, res) => {
    contentCache.clear();
    res.json({ success: true, message: 'Cache cleared' });
});

export default router;
