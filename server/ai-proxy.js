// server/ai-proxy.js - COMPLETE AI PROXY WITH SMART FULL SOLUTION CHAT
import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import multer from 'multer';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import personalitySystem from './services/personalityLoader.js';
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3001;

app.use(cors());
app.use(express.json({ limit: '50mb' }));

// ==================== MULTER CONFIGURATION ====================
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = path.join(__dirname, '../uploads');
        if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir, { recursive: true });
        }
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        cb(null, 'personality-system.xlsx');
    }
});

const upload = multer({
    storage,
    fileFilter: (req, file, cb) => {
        if (file.mimetype === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' ||
            file.mimetype === 'application/vnd.ms-excel') {
            cb(null, true);
        } else {
            cb(new Error('Only Excel files allowed!'), false);
        }
    }
});

// ==================== HEALTH CHECK ====================
app.get('/health', (req, res) => {
    res.json({
        status: 'ok',
        message: 'Nexon AI Server Running',
        personalityLoaded: personalitySystem.loaded
    });
});

// ==================== ADMIN: UPLOAD PERSONALITY EXCEL ====================
app.post('/api/admin/upload-personality', upload.single('file'), (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ success: false, error: 'No file uploaded' });
        }

        console.log('üìÅ Uploaded file:', req.file.filename);

        const loaded = personalitySystem.loadFromExcel(req.file.path);

        if (loaded) {
            res.json({
                success: true,
                message: 'Personality system uploaded and loaded successfully!',
                stats: {
                    examples: personalitySystem.data.examplesBank.length,
                    topics: personalitySystem.data.topicGuidelines.length,
                    hints: personalitySystem.data.hintSystem.length,
                    errors: personalitySystem.data.errorPatterns.length,
                    encouragements: personalitySystem.data.encouragementLibrary.length,
                    templates: personalitySystem.data.questionTemplates.length
                }
            });
        } else {
            res.status(500).json({ success: false, error: 'Failed to load personality system' });
        }
    } catch (error) {
        console.error('Upload error:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

// ==================== ADMIN: GET PERSONALITY STATUS ====================
app.get('/api/admin/personality-status', (req, res) => {
    res.json({
        loaded: personalitySystem.loaded,
        stats: personalitySystem.loaded ? {
            examples: personalitySystem.data.examplesBank.length,
            topics: personalitySystem.data.topicGuidelines.length,
            hints: personalitySystem.data.hintSystem.length,
            errors: personalitySystem.data.errorPatterns.length,
            encouragements: personalitySystem.data.encouragementLibrary.length,
            templates: personalitySystem.data.questionTemplates.length,
            corePersonality: personalitySystem.data.corePersonality
        } : null
    });
});

// ==================== DYNAMIC QUESTION GENERATION ====================
app.post('/api/ai/generate-question', async (req, res) => {
    try {
        const { topic, subtopic, difficulty, studentProfile } = req.body;

        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        console.log('üìù PERSONALITY-BASED QUESTION GENERATION');
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        console.log('   Student:', studentProfile.name);
        console.log('   Grade:', studentProfile.grade);
        console.log('   Topic:', topic.name);
        console.log('   Subtopic:', subtopic?.name || 'General');
        console.log('   Difficulty:', difficulty);
        console.log('   Personality System:', personalitySystem.loaded ? '‚úÖ Active' : '‚ùå Not Loaded');

        const systemPrompt = personalitySystem.loaded
            ? personalitySystem.buildSystemPrompt(studentProfile)
            : buildSystemPrompt(studentProfile);

        const prompt = personalitySystem.loaded
            ? personalitySystem.buildQuestionPrompt(topic, subtopic, difficulty, studentProfile)
            : buildDynamicQuestionPrompt(topic, subtopic, difficulty, studentProfile);

        if (personalitySystem.loaded) {
            const examples = personalitySystem.getExamplesForTopic(topic.name, difficulty);
            console.log(`   üìö Using ${examples.length} example(s) from personality system`);
        }

        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

        if (process.env.ANTHROPIC_API_KEY) {
            console.log('ü§ñ Using Claude 3.5 Haiku for question generation...');

            const response = await fetch('https://api.anthropic.com/v1/messages', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-api-key': process.env.ANTHROPIC_API_KEY,
                    'anthropic-version': '2023-06-01'
                },
                body: JSON.stringify({
                    model: 'claude-3-5-haiku-20241022',
                    max_tokens: 3000,
                    temperature: 0.8,
                    system: systemPrompt,
                    messages: [{ role: 'user', content: prompt }]
                })
            });

            const data = await response.json();

            if (!response.ok) {
                console.error('‚ùå Claude API error:', data.error);
                throw new Error(data.error?.message || 'Claude API error');
            }

            try {
                const rawText = data.content[0].text;
                console.log('üì• Claude raw response (first 200 chars):', rawText.substring(0, 200));

                let jsonText = rawText.trim();

                if (jsonText.startsWith('```json')) {
                    jsonText = jsonText.replace(/```json\n?/g, '').replace(/```\n?$/g, '');
                } else if (jsonText.startsWith('```')) {
                    jsonText = jsonText.replace(/```\n?/g, '');
                }

                const jsonStart = jsonText.indexOf('{');
                const jsonEnd = jsonText.lastIndexOf('}') + 1;

                if (jsonStart !== -1 && jsonEnd > jsonStart) {
                    jsonText = jsonText.substring(jsonStart, jsonEnd);
                }

                const parsed = JSON.parse(jsonText);

                console.log('‚úÖ Question generated with personality system!');
                console.log('   Question:', parsed.question.substring(0, 60) + '...');
                console.log('   Answer:', parsed.correctAnswer);
                console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

                return res.json({
                    success: true,
                    question: {
                        question: parsed.question,
                        correctAnswer: parsed.correctAnswer,
                        hints: parsed.hints || [],
                        explanation: parsed.explanation || '',
                        topic: topic.name,
                        subtopic: subtopic?.name,
                        difficulty: parsed.difficulty || difficulty,
                        gradeLevel: studentProfile.grade
                    },
                    model: 'claude-3.5-haiku',
                    generatedDynamically: true,
                    personalityActive: personalitySystem.loaded
                });
            } catch (parseError) {
                console.error('‚ùå Parse error:', parseError);
                console.error('Raw response:', data.content[0].text);
                throw parseError;
            }
        }

        if (process.env.OPENAI_API_KEY) {
            console.log('ü§ñ Using GPT-4 for question generation...');

            const response = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
                },
                body: JSON.stringify({
                    model: 'gpt-4',
                    messages: [
                        { role: 'system', content: systemPrompt },
                        { role: 'user', content: prompt }
                    ],
                    temperature: 0.8,
                    max_tokens: 2000
                })
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error?.message || 'OpenAI error');
            }

            try {
                const parsed = JSON.parse(data.choices[0].message.content);

                return res.json({
                    success: true,
                    question: {
                        question: parsed.question,
                        correctAnswer: parsed.correctAnswer,
                        hints: parsed.hints || [],
                        explanation: parsed.explanation || '',
                        topic: topic.name,
                        subtopic: subtopic?.name
                    },
                    model: 'gpt-4',
                    generatedDynamically: true,
                    personalityActive: personalitySystem.loaded
                });
            } catch (parseError) {
                console.error('‚ùå Parse error:', parseError);
                throw parseError;
            }
        }

        throw new Error('No AI API configured');

    } catch (error) {
        console.error('‚ùå Question generation error:', error);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// ==================== DYNAMIC ANSWER VERIFICATION ====================
app.post('/api/ai/verify-answer', async (req, res) => {
    try {
        const { question, userAnswer, correctAnswer, studentName, grade, topic, subtopic } = req.body;

        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        console.log('üîç SMART ANSWER VERIFICATION');
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        console.log('   Student:', studentName);
        console.log('   Question:', question.substring(0, 60) + '...');
        console.log('   User Answer:', userAnswer);
        console.log('   Expected:', correctAnswer);
        console.log('   Topic:', topic);
        console.log('   Subtopic:', subtopic);
        console.log('   Personality System:', personalitySystem.loaded ? '‚úÖ Active' : '‚ùå Not Loaded');
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

        const prompt = personalitySystem.loaded
            ? personalitySystem.buildVerificationPrompt(question, userAnswer, correctAnswer, topic)
            : buildVerificationPrompt(question, userAnswer, correctAnswer, topic, subtopic, grade);

        if (process.env.ANTHROPIC_API_KEY) {
            console.log('ü§ñ Using Claude 3.5 Haiku for smart verification...');

            const systemPromptText = personalitySystem.loaded
                ? `◊ê◊™◊î ${personalitySystem.data.corePersonality.teacher_name}, ◊û◊ï◊®◊î ◊û◊™◊û◊ò◊ô◊ß◊î ◊û◊ï◊û◊ó◊î. ◊ê◊™◊î ◊ë◊ï◊ì◊ß ◊™◊©◊ï◊ë◊ï◊™ ◊ë◊¶◊ï◊®◊î ◊û◊ì◊ï◊ô◊ß◊™, ◊û◊ñ◊î◊î ◊©◊ß◊ô◊ú◊ï◊™ ◊û◊™◊û◊ò◊ô◊™, ◊ï◊û◊°◊§◊ß ◊û◊©◊ï◊ë ◊û◊¢◊ï◊ì◊ì ◊ï◊û◊ì◊ï◊ô◊ß. ◊î◊ó◊ñ◊® ◊™◊û◊ô◊ì JSON ◊™◊ß◊ô◊ü ◊ë◊ú◊ë◊ì, ◊ú◊ú◊ê ◊ò◊ß◊°◊ò ◊†◊ï◊°◊£ ◊ú◊§◊†◊ô ◊ê◊ï ◊ê◊ó◊®◊ô ◊î-JSON.`
                : `◊ê◊™◊î ◊†◊ß◊°◊ï◊ü, ◊û◊ï◊®◊î ◊û◊™◊û◊ò◊ô◊ß◊î ◊û◊ï◊û◊ó◊î. ◊ê◊™◊î ◊ë◊ï◊ì◊ß ◊™◊©◊ï◊ë◊ï◊™ ◊ë◊¶◊ï◊®◊î ◊û◊ì◊ï◊ô◊ß◊™, ◊û◊ñ◊î◊î ◊©◊ß◊ô◊ú◊ï◊™ ◊û◊™◊û◊ò◊ô◊™, ◊ï◊û◊°◊§◊ß ◊û◊©◊ï◊ë ◊û◊¢◊ï◊ì◊ì ◊ï◊û◊ì◊ï◊ô◊ß. ◊î◊ó◊ñ◊® ◊™◊û◊ô◊ì JSON ◊™◊ß◊ô◊ü ◊ë◊ú◊ë◊ì, ◊ú◊ú◊ê ◊ò◊ß◊°◊ò ◊†◊ï◊°◊£ ◊ú◊§◊†◊ô ◊ê◊ï ◊ê◊ó◊®◊ô ◊î-JSON.`;

            const response = await fetch('https://api.anthropic.com/v1/messages', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-api-key': process.env.ANTHROPIC_API_KEY,
                    'anthropic-version': '2023-06-01'
                },
                body: JSON.stringify({
                    model: 'claude-3-5-haiku-20241022',
                    max_tokens: 1500,
                    temperature: 0.3,
                    system: systemPromptText,
                    messages: [{ role: 'user', content: prompt }]
                })
            });

            const data = await response.json();

            if (!response.ok) {
                console.error('‚ùå Claude API error:', data.error);
                throw new Error(data.error?.message || 'Claude API error');
            }

            try {
                const rawText = data.content[0].text;
                console.log('üì• Claude raw response (first 200 chars):', rawText.substring(0, 200));

                let jsonText = rawText.trim();

                if (jsonText.startsWith('```json')) {
                    jsonText = jsonText.replace(/```json\n?/g, '').replace(/```\n?$/g, '');
                } else if (jsonText.startsWith('```')) {
                    jsonText = jsonText.replace(/```\n?/g, '');
                }

                const jsonStart = jsonText.indexOf('{');
                const jsonEnd = jsonText.lastIndexOf('}') + 1;

                if (jsonStart !== -1 && jsonEnd > jsonStart) {
                    jsonText = jsonText.substring(jsonStart, jsonEnd);
                }

                const parsed = JSON.parse(jsonText);

                if (typeof parsed.isCorrect !== 'boolean') {
                    throw new Error('Missing or invalid isCorrect field');
                }

                console.log('‚úÖ Verification complete:', parsed.isCorrect ? 'CORRECT' : 'INCORRECT');
                if (parsed.isPartial) console.log('   Partial credit detected');
                console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

                let feedback = parsed.feedback;
                if (personalitySystem.loaded) {
                    let situation = 'correct_first_try';
                    if (!parsed.isCorrect) {
                        situation = 'wrong_answer_first';
                    } else if (parsed.isPartial) {
                        situation = 'partially_correct';
                    }

                    const personalizedFeedback = personalitySystem.getEncouragement(situation);
                    if (personalizedFeedback) {
                        feedback = personalizedFeedback.replace('◊™◊ú◊û◊ô◊ì', studentName);
                    }
                }

                return res.json({
                    success: true,
                    isCorrect: parsed.isCorrect,
                    isPartial: parsed.isPartial || false,
                    confidence: parsed.confidence || 95,
                    feedback: feedback || (parsed.isCorrect ? '◊†◊õ◊ï◊ü!' : '◊ú◊ê ◊†◊õ◊ï◊ü'),
                    explanation: parsed.explanation || '',
                    whatCorrect: parsed.whatCorrect || null,
                    whatMissing: parsed.whatMissing || null,
                    model: 'claude-3.5-haiku-20241022',
                    personalityActive: personalitySystem.loaded
                });
            } catch (parseError) {
                console.error('‚ùå JSON Parse error:', parseError.message);
                console.error('Raw response:', data.content[0].text);

                const rawText = data.content[0].text;
                const lowerText = rawText.toLowerCase();
                const seemsCorrect = lowerText.includes('◊†◊õ◊ï◊ü') || lowerText.includes('correct');

                console.log('‚ö†Ô∏è Using fallback interpretation:', seemsCorrect ? 'CORRECT' : 'INCORRECT');

                return res.json({
                    success: true,
                    isCorrect: seemsCorrect,
                    isPartial: false,
                    confidence: 60,
                    feedback: seemsCorrect ? '◊†◊õ◊ï◊ü!' : '◊†◊°◊î ◊©◊ï◊ë',
                    explanation: rawText.substring(0, 200),
                    model: 'claude-3.5-haiku-20241022',
                    fallback: true,
                    personalityActive: personalitySystem.loaded
                });
            }
        }

        if (process.env.OPENAI_API_KEY) {
            console.log('ü§ñ Using GPT-4 for verification...');

            const response = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
                },
                body: JSON.stringify({
                    model: 'gpt-4',
                    messages: [
                        { role: 'system', content: '◊ê◊™◊î ◊û◊ï◊®◊î ◊û◊™◊û◊ò◊ô◊ß◊î ◊û◊ï◊û◊ó◊î. ◊ë◊ì◊ï◊ß ◊™◊©◊ï◊ë◊ï◊™ ◊ë◊ì◊ô◊ï◊ß. ◊î◊ó◊ñ◊® JSON ◊™◊ß◊ô◊ü ◊ë◊ú◊ë◊ì.' },
                        { role: 'user', content: prompt }
                    ],
                    temperature: 0.3,
                    max_tokens: 1000
                })
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error?.message || 'OpenAI error');
            }

            const parsed = JSON.parse(data.choices[0].message.content);
            return res.json({
                success: true,
                ...parsed,
                model: 'gpt-4',
                personalityActive: personalitySystem.loaded
            });
        }

        throw new Error('No AI API configured');

    } catch (error) {
        console.error('‚ùå Verification error:', error);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// ==================== GET HINT ====================
app.post('/api/ai/get-hint', async (req, res) => {
    try {
        const { question, hintIndex, studentProfile } = req.body;

        console.log(`üí° Generating hint ${hintIndex + 1} for:`, studentProfile?.name);

        let hintStyle = null;
        if (personalitySystem.loaded) {
            const difficulty = hintIndex === 0 ? 'easy' : hintIndex === 1 ? 'medium' : 'hard';
            hintStyle = personalitySystem.getHintStyle(difficulty, 0);
        }

        const prompt = buildHintPrompt(question, hintIndex, studentProfile, hintStyle);
        const systemPrompt = personalitySystem.loaded
            ? personalitySystem.buildSystemPrompt(studentProfile)
            : buildSystemPrompt(studentProfile || {});

        if (process.env.ANTHROPIC_API_KEY) {
            const response = await fetch('https://api.anthropic.com/v1/messages', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-api-key': process.env.ANTHROPIC_API_KEY,
                    'anthropic-version': '2023-06-01'
                },
                body: JSON.stringify({
                    model: 'claude-3-5-haiku-20241022',
                    max_tokens: 500,
                    temperature: 0.7,
                    system: systemPrompt,
                    messages: [{ role: 'user', content: prompt }]
                })
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error?.message || 'Claude API error');
            }

            console.log('‚úÖ Hint generated');

            return res.json({
                success: true,
                hint: data.content[0].text,
                personalityActive: personalitySystem.loaded
            });
        }

        if (process.env.OPENAI_API_KEY) {
            const response = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
                },
                body: JSON.stringify({
                    model: 'gpt-3.5-turbo',
                    messages: [
                        { role: 'system', content: systemPrompt },
                        { role: 'user', content: prompt }
                    ],
                    temperature: 0.7,
                    max_tokens: 500
                })
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error?.message || 'OpenAI error');
            }

            return res.json({
                success: true,
                hint: data.choices[0].message.content,
                personalityActive: personalitySystem.loaded
            });
        }

        throw new Error('No AI API configured');

    } catch (error) {
        console.error('‚ùå Hint error:', error);
        res.json({
            success: true,
            hint: '◊†◊°◊î ◊ú◊§◊®◊ß ◊ê◊™ ◊î◊©◊ê◊ú◊î ◊ú◊©◊ú◊ë◊ô◊ù ◊ß◊ò◊†◊ô◊ù ◊ô◊ï◊™◊® ü§î'
        });
    }
});

// ==================== AI CHAT ASSISTANT (FIXED - GIVES FULL SOLUTIONS) ====================
app.post('/api/ai/chat', async (req, res) => {
    try {
        const { message, context } = req.body;

        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        console.log('üí¨ AI CHAT WITH PERSONALITY');
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        console.log('   Student:', context?.studentName || 'Unknown');
        console.log('   Message:', message);
        console.log('   Question:', context?.question?.substring(0, 60) + '...' || 'N/A');
        console.log('   Correct Answer:', context?.answer || 'N/A');
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

        // Build personality-aware system prompt
        let systemPrompt = '';

        if (personalitySystem.loaded && personalitySystem.data?.corePersonality) {
            try {
                const personality = personalitySystem.data.corePersonality;
                systemPrompt = `◊ê◊™◊î ${personality.teacher_name || '◊†◊ß◊°◊ï◊ü'}, ◊û◊ï◊®◊î ◊û◊™◊û◊ò◊ô◊ß◊î ◊û◊ï◊û◊ó◊î ◊©◊¢◊ï◊ñ◊® ◊ú◊™◊ú◊û◊ô◊ì◊ô◊ù.

◊õ◊©◊™◊ú◊û◊ô◊ì ◊û◊ë◊ß◊© ◊§◊™◊®◊ï◊ü ◊û◊ú◊ê ◊ê◊ï ◊©◊ú◊ë◊ô◊ù - ◊™◊ü ◊ú◊ï ◊ê◊™ ◊ñ◊î ◊û◊ô◊ì!
◊ê◊ú ◊™◊©◊ê◊ú ◊©◊ê◊ú◊ï◊™ ◊û◊ô◊ï◊™◊®◊ï◊™!
◊ê◊ú ◊™◊¶◊ô◊¢ ◊¢◊ñ◊®◊î - ◊™◊ü ◊ê◊™ ◊î◊§◊™◊®◊ï◊ü!

◊ì◊ë◊® ◊ë◊¢◊ë◊®◊ô◊™ ◊ò◊ë◊¢◊ô◊™ ◊ï◊ó◊û◊î.`;
            } catch (err) {
                systemPrompt = `◊ê◊™◊î ◊†◊ß◊°◊ï◊ü, ◊û◊ï◊®◊î ◊û◊™◊û◊ò◊ô◊ß◊î ◊©◊¢◊ï◊ñ◊® ◊ú◊™◊ú◊û◊ô◊ì◊ô◊ù. ◊õ◊©◊û◊ë◊ß◊©◊ô◊ù ◊§◊™◊®◊ï◊ü ◊û◊ú◊ê - ◊™◊ü ◊ê◊ï◊™◊ï ◊û◊ô◊ì!`;
            }
        } else {
            systemPrompt = `◊ê◊™◊î ◊†◊ß◊°◊ï◊ü, ◊û◊ï◊®◊î ◊û◊™◊û◊ò◊ô◊ß◊î ◊©◊¢◊ï◊ñ◊® ◊ú◊™◊ú◊û◊ô◊ì◊ô◊ù. ◊õ◊©◊û◊ë◊ß◊©◊ô◊ù ◊§◊™◊®◊ï◊ü ◊û◊ú◊ê - ◊™◊ü ◊ê◊ï◊™◊ï ◊û◊ô◊ì!`;
        }

        // Build the conversation prompt
        const lowerMessage = message.toLowerCase();

        // Aggressive detection for full solution
        const wantsFullSolution =
            lowerMessage.includes('◊§◊™◊®◊ï◊ü') ||
            lowerMessage.includes('◊î◊®◊ê◊î') ||
            lowerMessage.includes('◊™◊ü') ||
            lowerMessage.includes('◊©◊ú◊ë') ||
            lowerMessage.includes('◊¶◊¢◊ì') ||
            lowerMessage.includes('◊ê◊ô◊ö') ||
            lowerMessage.includes('◊õ◊ü') ||
            lowerMessage.includes('◊ë◊ò◊ó') ||
            lowerMessage.includes('◊û◊ú◊ê');

        let conversationPrompt = '';

        if (wantsFullSolution) {
            // Force full detailed solution
            conversationPrompt = `◊î◊©◊ê◊ú◊î: ${context?.question || '◊ú◊ê ◊ñ◊û◊ô◊ü'}

◊î◊™◊©◊ï◊ë◊î ◊î◊†◊õ◊ï◊†◊î: ${context?.answer || '◊ú◊ê ◊ñ◊û◊ô◊ü'}

◊î◊™◊ú◊û◊ô◊ì ${context?.studentName || '◊™◊ú◊û◊ô◊ì'} ◊ë◊ô◊ß◊© ◊§◊™◊®◊ï◊ü ◊û◊ú◊ê!

◊™◊ü ◊¢◊õ◊©◊ô◊ï ◊§◊™◊®◊ï◊ü ◊û◊§◊ï◊®◊ò ◊¢◊ù ◊õ◊ú ◊î◊©◊ú◊ë◊ô◊ù:

◊ì◊ï◊í◊û◊î ◊ú◊§◊ï◊®◊û◊ò:

üìù **◊§◊™◊®◊ï◊ü ◊û◊ú◊ê:**

**◊©◊ú◊ë 1:** [◊î◊°◊ë◊® ◊û◊î ◊ê◊†◊ó◊†◊ï ◊¢◊ï◊©◊ô◊ù]
◊ó◊ô◊©◊ï◊ë: [◊î◊ó◊ô◊©◊ï◊ë ◊î◊û◊ì◊ï◊ô◊ß ◊õ◊ê◊ü]
◊™◊ï◊¶◊ê◊î: [◊™◊ï◊¶◊ê◊™ ◊ë◊ô◊†◊ô◊ô◊ù]

**◊©◊ú◊ë 2:** [◊î◊°◊ë◊®]
◊ó◊ô◊©◊ï◊ë: [◊ó◊ô◊©◊ï◊ë]
◊™◊ï◊¶◊ê◊î: [◊™◊ï◊¶◊ê◊î]

**◊©◊ú◊ë 3:** [◊î◊û◊©◊ö...]

‚úÖ **◊î◊™◊©◊ï◊ë◊î ◊î◊°◊ï◊§◊ô◊™:** ${context?.answer || '[◊™◊©◊ï◊ë◊î]'}

---

◊ó◊©◊ï◊ë:
- ◊õ◊™◊ï◊ë ◊ú◊§◊ó◊ï◊™ 8-12 ◊û◊©◊§◊ò◊ô◊ù
- ◊™◊ü ◊ê◊™ ◊õ◊ú ◊î◊ó◊ô◊©◊ï◊ë◊ô◊ù
- ◊î◊°◊ë◊® ◊õ◊ú ◊©◊ú◊ë
- ◊°◊ô◊ô◊ù ◊¢◊ù ◊î◊™◊©◊ï◊ë◊î ◊î◊°◊ï◊§◊ô◊™
- ◊ê◊ú ◊™◊©◊ê◊ú ◊©◊ê◊ú◊ï◊™!
- ◊ê◊ú ◊™◊¶◊ô◊¢ ◊¢◊ñ◊®◊î ◊†◊ï◊°◊§◊™!
- ◊§◊©◊ï◊ò ◊™◊ü ◊ê◊™ ◊î◊§◊™◊®◊ï◊ü!`;

            console.log('üî¥ FORCING FULL SOLUTION MODE');

        } else {
            // Regular helpful guidance
            conversationPrompt = `◊î◊™◊ú◊û◊ô◊ì ${context?.studentName || '◊™◊ú◊û◊ô◊ì'} ◊©◊ï◊ê◊ú: "${message}"

◊î◊©◊ê◊ú◊î: ${context?.question || '◊ú◊ê ◊ñ◊û◊ô◊ü'}
◊î◊™◊©◊ï◊ë◊î ◊î◊†◊õ◊ï◊†◊î: ${context?.answer || '◊ú◊ê ◊ñ◊û◊ô◊ü'}

◊™◊ü ◊¢◊ñ◊®◊î ◊ß◊¶◊®◊î ◊ï◊û◊ï◊¢◊ô◊ú◊î (2-3 ◊û◊©◊§◊ò◊ô◊ù).`;
        }

        // Call Claude API
        if (process.env.ANTHROPIC_API_KEY) {
            console.log('ü§ñ Using Claude for chat...');

            const response = await fetch('https://api.anthropic.com/v1/messages', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-api-key': process.env.ANTHROPIC_API_KEY,
                    'anthropic-version': '2023-06-01'
                },
                body: JSON.stringify({
                    model: 'claude-3-5-haiku-20241022',
                    max_tokens: wantsFullSolution ? 2000 : 800,
                    temperature: 0.7,
                    system: systemPrompt,
                    messages: [{ role: 'user', content: conversationPrompt }]
                })
            });

            const data = await response.json();

            if (!response.ok) {
                console.error('‚ùå Claude API error:', data.error);
                throw new Error(data.error?.message || 'Claude API error');
            }

            const assistantResponse = data.content[0].text;

            console.log('‚úÖ Chat response generated');
            console.log('   Type:', wantsFullSolution ? 'üî¥ FULL SOLUTION' : 'GUIDANCE');
            console.log('   Length:', assistantResponse.length, 'chars');
            console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

            return res.json({
                success: true,
                response: assistantResponse,
                model: 'claude-3.5-haiku',
                personalityActive: personalitySystem.loaded,
                responseType: wantsFullSolution ? 'full_solution' : 'guidance'
            });
        }

        // OpenAI fallback
        if (process.env.OPENAI_API_KEY) {
            const response = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
                },
                body: JSON.stringify({
                    model: 'gpt-4',
                    messages: [
                        { role: 'system', content: systemPrompt },
                        { role: 'user', content: conversationPrompt }
                    ],
                    temperature: 0.7,
                    max_tokens: wantsFullSolution ? 2000 : 800
                })
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error?.message || 'OpenAI error');
            }

            return res.json({
                success: true,
                response: data.choices[0].message.content,
                model: 'gpt-4',
                personalityActive: personalitySystem.loaded
            });
        }

        throw new Error('No AI API configured');

    } catch (error) {
        console.error('‚ùå Chat error:', error);
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// ==================== HELPER FUNCTIONS ====================

function buildSystemPrompt(studentProfile) {
    const { grade, mathFeeling, learningStyle, goalFocus, weakTopics } = studentProfile;

    let prompt = `◊ê◊™◊î ◊†◊ß◊°◊ï◊ü, ◊û◊ï◊®◊î ◊ì◊ô◊í◊ô◊ò◊ú◊ô ◊ú◊û◊™◊û◊ò◊ô◊ß◊î ◊û◊ï◊û◊ó◊î ◊ë◊™◊õ◊†◊ô◊™ ◊î◊ú◊ô◊û◊ï◊ì◊ô◊ù ◊î◊ô◊©◊®◊ê◊ú◊ô◊™.\n\n`;

    if (grade) {
        prompt += `◊î◊™◊ú◊û◊ô◊ì ◊ú◊ï◊û◊ì ◊ë◊õ◊ô◊™◊î ${grade}.\n`;
    }

    if (weakTopics && weakTopics.length > 0) {
        prompt += `◊†◊ï◊©◊ê◊ô◊ù ◊©◊î◊™◊ú◊û◊ô◊ì ◊û◊™◊ß◊©◊î ◊ë◊î◊ù: ${weakTopics.join(', ')}.\n`;
        prompt += `◊©◊ô◊ù ◊ì◊í◊© ◊û◊ô◊ï◊ó◊ì ◊¢◊ú ◊†◊ï◊©◊ê◊ô◊ù ◊ê◊ú◊î ◊ï◊î◊°◊ë◊® ◊ë◊¶◊ï◊®◊î ◊û◊§◊ï◊®◊ò◊™ ◊ô◊ï◊™◊®.\n\n`;
    }

    if (mathFeeling === 'struggle') {
        prompt += `◊î◊™◊ú◊û◊ô◊ì ◊û◊™◊ß◊©◊î ◊ë◊û◊™◊û◊ò◊ô◊ß◊î - ◊î◊ô◊î ◊°◊ë◊ú◊†◊ô, ◊û◊¢◊ï◊ì◊ì ◊ï◊™◊ü ◊î◊°◊ë◊®◊ô◊ù ◊§◊©◊ï◊ò◊ô◊ù ◊¶◊¢◊ì ◊ê◊ó◊® ◊¶◊¢◊ì.\n`;
    } else if (mathFeeling === 'love') {
        prompt += `◊î◊™◊ú◊û◊ô◊ì ◊ê◊ï◊î◊ë ◊û◊™◊û◊ò◊ô◊ß◊î - ◊™◊ü ◊ê◊™◊í◊®◊ô◊ù ◊û◊¢◊†◊ô◊ô◊†◊ô◊ù ◊ï◊©◊ê◊ú◊ï◊™ ◊û◊™◊ß◊ì◊û◊ï◊™.\n`;
    } else {
        prompt += `◊î◊™◊ú◊û◊ô◊ì ◊ë◊°◊ì◊® ◊¢◊ù ◊û◊™◊û◊ò◊ô◊ß◊î - ◊¢◊ñ◊ï◊® ◊ú◊ï ◊ú◊î◊©◊™◊§◊® ◊ë◊î◊ì◊®◊í◊î.\n`;
    }

    if (learningStyle === 'independent') {
        prompt += `◊î◊™◊ú◊û◊ô◊ì ◊ê◊ï◊î◊ë ◊ú◊§◊™◊ï◊® ◊ë◊¢◊¶◊û◊ï - ◊™◊ü ◊®◊û◊ñ◊ô◊ù ◊¢◊ì◊ô◊†◊ô◊ù.\n`;
    } else if (learningStyle === 'ask') {
        prompt += `◊î◊™◊ú◊û◊ô◊ì ◊û◊ï◊õ◊ü ◊ú◊ë◊ß◊© ◊¢◊ñ◊®◊î - ◊™◊ü ◊î◊°◊ë◊®◊ô◊ù ◊û◊§◊ï◊®◊ò◊ô◊ù ◊õ◊©◊¶◊®◊ô◊ö.\n`;
    } else {
        prompt += `◊î◊™◊ú◊û◊ô◊ì ◊û◊™◊ô◊ô◊ê◊© ◊û◊î◊® - ◊î◊ô◊î ◊û◊ê◊ï◊ì ◊û◊¢◊ï◊ì◊ì ◊ï◊ó◊ô◊ï◊ë◊ô.\n`;
    }

    if (goalFocus === 'understanding') {
        prompt += `◊î◊™◊û◊ß◊ì ◊ë◊î◊ë◊†◊î ◊û◊¢◊û◊ô◊ß◊î ◊©◊ú ◊î◊û◊ï◊©◊í◊ô◊ù.\n`;
    } else if (goalFocus === 'speed') {
        prompt += `◊¢◊ñ◊ï◊® ◊ú◊§◊™◊ó ◊û◊î◊ô◊®◊ï◊™ ◊ë◊§◊™◊®◊ï◊ü ◊™◊®◊í◊ô◊ú◊ô◊ù.\n`;
    } else if (goalFocus === 'accuracy') {
        prompt += `◊©◊ô◊ù ◊ì◊í◊© ◊¢◊ú ◊ì◊ô◊ï◊ß ◊ï◊ë◊ì◊ô◊ß◊™ ◊™◊©◊ï◊ë◊ï◊™.\n`;
    } else {
        prompt += `◊ë◊†◊î ◊ë◊ô◊ò◊ó◊ï◊ü ◊¢◊¶◊û◊ô ◊ï◊î◊®◊ê◊î ◊©◊û◊™◊û◊ò◊ô◊ß◊î ◊ñ◊î ◊õ◊ô◊£!\n`;
    }

    prompt += `\n◊°◊í◊†◊ï◊ü ◊î◊™◊ß◊©◊ï◊®◊™ ◊©◊ú◊ö: ◊ô◊ì◊ô◊ì◊ï◊™◊ô, ◊û◊¢◊ï◊ì◊ì, ◊¢◊ù ◊î◊°◊ë◊®◊ô◊ù ◊ë◊®◊ï◊®◊ô◊ù ◊ï◊ì◊ï◊í◊û◊ê◊ï◊™ ◊û◊î◊ó◊ô◊ô◊ù.`;

    return prompt;
}

function buildDynamicQuestionPrompt(topic, subtopic, difficulty, studentProfile) {
    let prompt = `◊¶◊ï◊® ◊©◊ê◊ú◊î ◊ì◊ô◊†◊û◊ô◊™ ◊ë◊û◊™◊û◊ò◊ô◊ß◊î ◊ë◊¢◊ë◊®◊ô◊™ ◊¢◊ë◊ï◊® ◊™◊õ◊†◊ô◊™ ◊î◊ú◊ô◊û◊ï◊ì◊ô◊ù ◊î◊ô◊©◊®◊ê◊ú◊ô◊™.\n\n`;

    prompt += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
    prompt += `◊§◊®◊ò◊ô ◊î◊™◊ú◊û◊ô◊ì:\n`;
    prompt += `‚Ä¢ ◊õ◊ô◊™◊î: ${studentProfile.grade}\n`;
    prompt += `‚Ä¢ ◊®◊û◊™ ◊î◊ë◊†◊î: ${studentProfile.mathFeeling || '◊ë◊ô◊†◊ï◊†◊ô'}\n`;
    prompt += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

    prompt += `◊ì◊®◊ô◊©◊ï◊™ ◊î◊©◊ê◊ú◊î:\n`;
    prompt += `‚Ä¢ ◊†◊ï◊©◊ê ◊®◊ê◊©◊ô: ${topic.name} (${topic.nameEn})\n`;

    if (subtopic) {
        prompt += `‚Ä¢ ◊™◊™-◊†◊ï◊©◊ê: ${subtopic.name} (${subtopic.nameEn})\n`;
        prompt += `‚Ä¢ ‚ö†Ô∏è ◊ó◊©◊ï◊ë! ◊î◊©◊ê◊ú◊î ◊ó◊ô◊ô◊ë◊™ ◊ú◊î◊™◊ê◊ô◊ù ◊ë◊ì◊ô◊ï◊ß ◊ú◊™◊™-◊î◊†◊ï◊©◊ê ◊î◊ñ◊î!\n`;
    }

    prompt += `‚Ä¢ ◊®◊û◊™ ◊ß◊ï◊©◊ô: ${difficulty}\n`;
    prompt += `‚Ä¢ ◊î◊™◊ê◊ù ◊ú◊™◊õ◊†◊ô◊™ ◊î◊ú◊ô◊û◊ï◊ì◊ô◊ù ◊©◊ú ◊õ◊ô◊™◊î ${studentProfile.grade}\n\n`;

    prompt += `◊ó◊ï◊ß◊ô◊ù ◊ß◊®◊ô◊ò◊ô◊ô◊ù:\n`;
    prompt += `1. ◊î◊©◊ê◊ú◊î ◊ó◊ô◊ô◊ë◊™ ◊ú◊î◊ô◊ï◊™ ◊°◊§◊¶◊ô◊§◊ô◊™ ◊ï◊û◊ú◊ê◊î ◊¢◊ù ◊õ◊ú ◊î◊†◊™◊ï◊†◊ô◊ù ◊î◊ì◊®◊ï◊©◊ô◊ù\n`;
    prompt += `2. ◊î◊™◊ó◊ú ◊ë◊§◊ï◊¢◊ú ◊ë◊®◊ï◊®: "◊ó◊©◊ë:", "◊§◊™◊ï◊®:", "◊û◊¶◊ê:", "◊î◊ï◊õ◊ó:"\n`;
    prompt += `3. ◊î◊™◊©◊ï◊ë◊î ◊ó◊ô◊ô◊ë◊™ ◊ú◊î◊ô◊ï◊™ ◊û◊°◊§◊®◊ô◊™ ◊ê◊ï ◊ê◊ú◊í◊ë◊®◊ô◊™ ◊û◊ì◊ï◊ô◊ß◊™\n`;
    prompt += `4. ◊õ◊ú◊ï◊ú 3 ◊®◊û◊ñ◊ô◊ù ◊û◊ì◊ï◊®◊í◊ô◊ù (◊ß◊ú ‚Üí ◊ë◊ô◊†◊ï◊†◊ô ‚Üí ◊ó◊ñ◊ß)\n`;
    prompt += `5. ◊ï◊ì◊ê ◊©◊î◊©◊ê◊ú◊î ◊û◊™◊ê◊ô◊û◊î ◊ú◊®◊û◊™ ◊õ◊ô◊™◊î ${studentProfile.grade}\n`;
    prompt += `6. ◊ë◊ì◊ï◊ß ◊ê◊™ ◊î◊™◊©◊ï◊ë◊î ◊û◊™◊û◊ò◊ô◊™ ◊ú◊§◊†◊ô ◊©◊û◊ó◊ñ◊ô◊® ◊ê◊ï◊™◊î!\n\n`;

    prompt += `◊§◊ï◊®◊û◊ò ◊™◊©◊ï◊ë◊î (JSON ◊ë◊ú◊ë◊ì!):\n`;
    prompt += `{\n`;
    prompt += `  "question": "◊î◊©◊ê◊ú◊î ◊î◊û◊ú◊ê◊î ◊ë◊¢◊ë◊®◊ô◊™ ◊¢◊ù ◊õ◊ú ◊î◊†◊™◊ï◊†◊ô◊ù",\n`;
    prompt += `  "correctAnswer": "◊î◊™◊©◊ï◊ë◊î ◊î◊û◊ì◊ï◊ô◊ß◊™ - ◊ë◊ì◊ï◊ß ◊ê◊ï◊™◊î!",\n`;
    prompt += `  "hints": [\n`;
    prompt += `    "◊®◊û◊ñ ◊ß◊ú ◊©◊û◊õ◊ï◊ï◊ü ◊ú◊õ◊ô◊ï◊ï◊ü",\n`;
    prompt += `    "◊®◊û◊ñ ◊ë◊ô◊†◊ï◊†◊ô ◊¢◊ù ◊î◊¶◊¢◊ì ◊î◊®◊ê◊©◊ï◊ü",\n`;
    prompt += `    "◊®◊û◊ñ ◊ó◊ñ◊ß ◊¢◊ù ◊ì◊ï◊í◊û◊î ◊ì◊ï◊û◊î"\n`;
    prompt += `  ],\n`;
    prompt += `  "explanation": "◊î◊°◊ë◊® ◊û◊§◊ï◊®◊ò ◊©◊ú ◊î◊§◊™◊®◊ï◊ü ◊¢◊ù ◊õ◊ú ◊î◊¶◊¢◊ì◊ô◊ù",\n`;
    prompt += `  "difficulty": "basic|intermediate|advanced"\n`;
    prompt += `}\n\n`;

    prompt += `‚ö†Ô∏è ◊ó◊©◊ï◊ë ◊û◊ê◊ï◊ì: ◊î◊ó◊ñ◊® ◊®◊ß JSON ◊™◊ß◊ô◊ü, ◊ú◊ú◊ê ◊ò◊ß◊°◊ò ◊†◊ï◊°◊£ ◊ú◊§◊†◊ô ◊ê◊ï ◊ê◊ó◊®◊ô!`;

    return prompt;
}

function buildVerificationPrompt(question, userAnswer, correctAnswer, topic, subtopic, grade) {
    let prompt = `◊ë◊ì◊ï◊ß ◊™◊©◊ï◊ë◊î ◊û◊™◊û◊ò◊ô◊™ ◊ë◊¶◊ï◊®◊î ◊ó◊õ◊û◊î ◊ï◊û◊ì◊ï◊ô◊ß◊™.\n\n`;

    prompt += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
    prompt += `◊©◊ê◊ú◊î: ${question}\n`;
    prompt += `◊™◊©◊ï◊ë◊™ ◊™◊ú◊û◊ô◊ì: ${userAnswer}\n`;
    prompt += `◊™◊©◊ï◊ë◊î ◊†◊õ◊ï◊†◊î: ${correctAnswer}\n`;
    prompt += `◊†◊ï◊©◊ê: ${topic}\n`;
    if (subtopic) prompt += `◊™◊™-◊†◊ï◊©◊ê: ${subtopic}\n`;
    prompt += `◊õ◊ô◊™◊î: ${grade}\n`;
    prompt += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

    prompt += `◊ë◊ì◊ô◊ß◊ï◊™ ◊©◊¢◊ú◊ô◊ö ◊ú◊ë◊¶◊¢:\n`;
    prompt += `1. ◊©◊ß◊ô◊ú◊ï◊™ ◊û◊™◊û◊ò◊ô◊™ (◊ú◊û◊©◊ú: 0.5 = 1/2, 3x+6 = 3(x+2))\n`;
    prompt += `2. ◊§◊ï◊®◊û◊ò◊ô◊ù ◊©◊ï◊†◊ô◊ù ◊©◊ú ◊ê◊ï◊™◊î ◊™◊©◊ï◊ë◊î\n`;
    prompt += `3. ◊ì◊ô◊ï◊ß ◊û◊°◊§◊®◊ô (◊¢◊ô◊í◊ï◊ú◊ô◊ù, ◊©◊ë◊®◊ô◊ù)\n`;
    prompt += `4. ◊™◊©◊ï◊ë◊ï◊™ ◊ó◊ú◊ß◊ô◊ï◊™ (◊ú◊û◊©◊ú: ◊û◊¶◊ê ◊®◊ß ◊§◊™◊®◊ï◊ü ◊ê◊ó◊ì ◊ë◊û◊©◊ï◊ï◊ê◊î ◊®◊ô◊ë◊ï◊¢◊ô◊™)\n`;
    prompt += `5. ◊°◊ô◊û◊†◊ô◊ù ◊û◊™◊û◊ò◊ô◊ô◊ù (¬±, ‚àö, ¬≤, ◊ï◊õ◊ï')\n\n`;

    prompt += `◊ì◊ï◊í◊û◊ê◊ï◊™ ◊ú◊©◊ß◊ô◊ú◊ï◊™:\n`;
    prompt += `‚Ä¢ "2" = "2.0" = "2/1"\n`;
    prompt += `‚Ä¢ "¬±3" = "3 ◊ê◊ï -3" = "x=3 ◊ê◊ï x=-3"\n`;
    prompt += `‚Ä¢ "6x+12" = "6(x+2)"\n`;
    prompt += `‚Ä¢ "‚àö16" = "4" = "¬±4" (◊™◊ú◊ï◊ô ◊ë◊î◊ß◊©◊®)\n\n`;

    prompt += `◊§◊ï◊®◊û◊ò ◊™◊©◊ï◊ë◊î (JSON ◊ë◊ú◊ë◊ì!):\n`;
    prompt += `{\n`;
    prompt += `  "isCorrect": true/false,\n`;
    prompt += `  "isPartial": true/false,\n`;
    prompt += `  "confidence": 0-100,\n`;
    prompt += `  "feedback": "◊û◊©◊ï◊ë ◊ß◊¶◊® ◊ï◊û◊¢◊ï◊ì◊ì ◊ë◊¢◊ë◊®◊ô◊™",\n`;
    prompt += `  "explanation": "◊î◊°◊ë◊® ◊û◊§◊ï◊®◊ò ◊ú◊û◊î ◊î◊™◊©◊ï◊ë◊î ◊†◊õ◊ï◊†◊î/◊ú◊ê ◊†◊õ◊ï◊†◊î",\n`;
    prompt += `  "whatCorrect": "◊û◊î ◊î◊™◊ú◊û◊ô◊ì ◊¢◊©◊î ◊†◊õ◊ï◊ü (◊ê◊ù ◊ô◊©)",\n`;
    prompt += `  "whatMissing": "◊û◊î ◊ó◊°◊® ◊ê◊ï ◊©◊í◊ï◊ô (◊ê◊ù ◊ô◊©)"\n`;
    prompt += `}\n\n`;

    prompt += `‚ö†Ô∏è ◊ó◊©◊ï◊ë ◊û◊ê◊ï◊ì: ◊î◊ó◊ñ◊® ◊®◊ß JSON ◊™◊ß◊ô◊ü, ◊ú◊ú◊ê ◊ò◊ß◊°◊ò ◊†◊ï◊°◊£ ◊ú◊§◊†◊ô ◊ê◊ï ◊ê◊ó◊®◊ô!`;

    return prompt;
}

function buildHintPrompt(question, hintIndex, studentProfile, hintStyle) {
    const hintLevels = [
        '◊®◊û◊ñ ◊¢◊ì◊ô◊ü ◊û◊ê◊ï◊ì ◊©◊û◊õ◊ï◊ï◊ü ◊ú◊õ◊ô◊ï◊ï◊ü ◊î◊†◊õ◊ï◊ü',
        '◊®◊û◊ñ ◊ô◊©◊ô◊® ◊ô◊ï◊™◊® ◊¢◊ù ◊î◊¶◊¢◊ì ◊î◊®◊ê◊©◊ï◊ü ◊ë◊§◊™◊®◊ï◊ü',
        '◊®◊û◊ñ ◊°◊§◊¶◊ô◊§◊ô ◊¢◊ù ◊ì◊ï◊í◊û◊î ◊ì◊ï◊û◊î ◊ê◊ï ◊î◊†◊ï◊°◊ó◊î ◊î◊®◊ú◊ï◊ï◊†◊ò◊ô◊™',
        '◊õ◊û◊¢◊ò ◊î◊§◊™◊®◊ï◊ü ◊î◊û◊ú◊ê, ◊®◊ß ◊ë◊ú◊ô ◊ú◊™◊™ ◊ê◊™ ◊î◊™◊©◊ï◊ë◊î ◊î◊°◊ï◊§◊ô◊™'
    ];

    let prompt = `◊™◊ü ${hintLevels[hintIndex] || hintLevels[3]} ◊ú◊©◊ê◊ú◊î ◊î◊ë◊ê◊î:\n\n`;
    prompt += `${question}\n\n`;
    prompt += `◊î◊™◊ú◊û◊ô◊ì ◊ú◊ï◊û◊ì ◊ë◊õ◊ô◊™◊î ${studentProfile.grade || '8'}.\n`;

    if (hintStyle) {
        prompt += `\n◊°◊í◊†◊ï◊ü ◊î◊®◊û◊ñ: ${hintStyle.hint_style}\n`;
        prompt += `◊ì◊ï◊í◊û◊î: ${hintStyle.example_hint}\n\n`;
    }

    if (studentProfile.learningStyle === 'independent') {
        prompt += `◊î◊™◊ú◊û◊ô◊ì ◊ê◊ï◊î◊ë ◊ú◊§◊™◊ï◊® ◊ë◊¢◊¶◊û◊ï, ◊ê◊ñ ◊î◊®◊û◊ñ ◊¶◊®◊ô◊ö ◊ú◊î◊ô◊ï◊™ ◊¢◊ì◊ô◊ü.\n`;
    } else if (studentProfile.learningStyle === 'give-up') {
        prompt += `◊î◊™◊ú◊û◊ô◊ì ◊û◊™◊ô◊ô◊ê◊© ◊û◊î◊®, ◊ê◊ñ ◊î◊®◊û◊ñ ◊¶◊®◊ô◊ö ◊ú◊î◊ô◊ï◊™ ◊û◊¢◊ï◊ì◊ì ◊ï◊û◊§◊ï◊®◊ò.\n`;
    }

    prompt += `\n◊î◊ó◊ñ◊® ◊®◊ß ◊ê◊™ ◊î◊®◊û◊ñ ◊õ◊ò◊ß◊°◊ò ◊ë◊®◊ï◊® ◊ë◊¢◊ë◊®◊ô◊™, ◊ú◊ú◊ê JSON.`;

    return prompt;
}

// ==================== START SERVER ====================

const personalityPath = path.join(__dirname, '../uploads/personality-system.xlsx');
if (fs.existsSync(personalityPath)) {
    console.log('üîÑ Loading personality system from existing file...');
    personalitySystem.loadFromExcel(personalityPath);
}

app.listen(PORT, () => {
    console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('üöÄ NEXON AI SERVER - FULL SOLUTION MODE');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log(`üì° Server: http://localhost:${PORT}`);
    console.log('');
    console.log('ü§ñ AI Models:');
    console.log('   Primary: Claude 3.5 Haiku (Fast & Smart)');
    console.log('   Fallback: GPT-4');
    console.log('');
    console.log('üé≠ Personality System:', personalitySystem.loaded ? '‚úÖ LOADED' : '‚ùå Not Loaded');
    if (personalitySystem.loaded) {
        console.log('   üìö Examples:', personalitySystem.data.examplesBank.length);
        console.log('   üéØ Topics:', personalitySystem.data.topicGuidelines.length);
        console.log('   üí° Hints:', personalitySystem.data.hintSystem.length);
    }
    console.log('');
    console.log('üîë API Keys:');
    console.log('   Anthropic:', process.env.ANTHROPIC_API_KEY ? '‚úÖ Active' : '‚ùå Missing');
    console.log('   OpenAI:', process.env.OPENAI_API_KEY ? '‚úÖ Active' : '‚ùå Missing');
    console.log('');
    console.log('‚ú® Features:');
    console.log('   ‚Ä¢ üî¥ FULL SOLUTION MODE - Gives complete solutions when asked!');
    console.log('   ‚Ä¢ Dynamic question generation');
    console.log('   ‚Ä¢ Smart answer verification');
    console.log('   ‚Ä¢ AI Chat with aggressive solution detection');
    console.log('   ‚Ä¢ Personality-based responses');
    console.log('   ‚Ä¢ Israeli curriculum alignment');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
});