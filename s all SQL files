[1mdiff --git a/server/migrations/run-migrations.js b/server/migrations/run-migrations.js[m
[1mindex c333572..f9fac71 100644[m
[1m--- a/server/migrations/run-migrations.js[m
[1m+++ b/server/migrations/run-migrations.js[m
[36m@@ -13,59 +13,43 @@[m [masync function runMigrations() {[m
     console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');[m
 [m
     try {[m
[31m-        // Check if already migrated[m
[31m-        const checkTable = await pool.query(`[m
[31m-            SELECT EXISTS ([m
[31m-                SELECT FROM information_schema.tables [m
[31m-                WHERE table_schema = 'public' [m
[31m-                AND table_name = 'users'[m
[31m-            );[m
[31m-        `);[m
[31m-[m
[31m-        if (checkTable.rows[0].exists) {[m
[31m-            console.log('✅ Database already migrated - tables exist');[m
[31m-            console.log('ℹ️  To re-run migrations, drop tables first');[m
[31m-[m
[31m-            // Show table counts[m
[31m-            const counts = await pool.query(`[m
[31m-                SELECT [m
[31m-                    (SELECT COUNT(*) FROM users) as users,[m
[31m-                    (SELECT COUNT(*) FROM notebook_entries) as notebook,[m
[31m-                    (SELECT COUNT(*) FROM chat_sessions) as sessions,[m
[31m-                    (SELECT COUNT(*) FROM curriculum_progress) as progress[m
[31m-            `);[m
[31m-[m
[31m-            console.log('📊 Current table counts:');[m
[31m-            console.log('   Users:', counts.rows[0].users);[m
[31m-            console.log('   Notebook:', counts.rows[0].notebook);[m
[31m-            console.log('   Sessions:', counts.rows[0].sessions);[m
[31m-            console.log('   Progress:', counts.rows[0].progress);[m
[31m-            console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');[m
[31m-            return;[m
[32m+[m[32m        // Get all migration files[m
[32m+[m[32m        const migrationFiles = fs.readdirSync(__dirname)[m
[32m+[m[32m            .filter(file => file.endsWith('.sql'))[m
[32m+[m[32m            .sort(); // Run in order: 001, 002, etc.[m
[32m+[m
[32m+[m[32m        console.log(`📄 Found ${migrationFiles.length} migration file(s)`);[m
[32m+[m
[32m+[m[32m        for (const file of migrationFiles) {[m
[32m+[m[32m            const migrationPath = path.join(__dirname, file);[m
[32m+[m[32m            console.log(`📄 Running: ${file}`);[m
[32m+[m
[32m+[m[32m            const sql = fs.readFileSync(migrationPath, 'utf8');[m
[32m+[m
[32m+[m[32m            try {[m
[32m+[m[32m                await pool.query(sql);[m
[32m+[m[32m                console.log(`   ✅ ${file} completed`);[m
[32m+[m[32m            } catch (err) {[m
[32m+[m[32m                // Skip if already applied (tables exist, columns exist, etc.)[m
[32m+[m[32m                if (err.code === '42P07' || err.code === '42701') {[m
[32m+[m[32m                    console.log(`   ⏭️  ${file} already applied`);[m
[32m+[m[32m                } else {[m
[32m+[m[32m                    throw err;[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
         }[m
 [m
[31m-        // Read migration file[m
[31m-        const migrationPath = path.join(__dirname, '001_initial_schema.sql');[m
[31m-        console.log('📄 Reading migration file:', migrationPath);[m
[31m-[m
[31m-        const sql = fs.readFileSync(migrationPath, 'utf8');[m
[31m-        console.log('✅ Migration file loaded');[m
[31m-[m
[31m-        // Execute migration[m
[31m-        console.log('⚙️  Executing SQL...');[m
[31m-        await pool.query(sql);[m
[31m-[m
[31m-        console.log('✅ Migration completed successfully!');[m
[32m+[m[32m        console.log('✅ All migrations completed!');[m
 [m
         // Verify tables created[m
         const tables = await pool.query(`[m
[31m-            SELECT table_name [m
[31m-            FROM information_schema.tables [m
[32m+[m[32m            SELECT table_name[m
[32m+[m[32m            FROM information_schema.tables[m
             WHERE table_schema = 'public'[m
             ORDER BY table_name;[m
         `);[m
 [m
[31m-        console.log('📊 Created tables:');[m
[32m+[m[32m        console.log('📊 Database tables:');[m
         tables.rows.forEach(row => {[m
             console.log('   ✓', row.table_name);[m
         });[m
